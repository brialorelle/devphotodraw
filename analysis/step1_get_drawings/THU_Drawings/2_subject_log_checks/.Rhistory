is.na(str_locate(this_subid, db_IDS))
!is.na(str_locate(this_subid, db_IDS))
find(!is.na(str_locate(this_subid, db_IDS)))
!is.na(str_locate(this_subid, db_IDS))
!is.na(str_locate(this_subid, db_IDS))==TRUE
!is.na(str_locate(this_subid, db_IDS))
which(!is.na(str_locate(this_subid, db_IDS)))
which(!is.na(str_locate(this_subid, db_IDS)))[1]
match_count=0
sorted_DB_Ids=array()
reported_IDs <- IDs$ID_Tsinghua
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
match = !is.na(str_locate(this_subid, db_IDS))
if (match){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[match_count] = db_IDS[match_ind]
}
}
write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
sorted_DB_Ids=array()
reported_IDS <- IDs$ID_Tsinghua
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
match = !is.na(str_locate(this_subid, db_IDS))
if (match){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[match_count] = db_IDS[match_ind]
}
}
sorted_DB_Ids
match_count
match
sum(match)
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
sorted_DB_Ids=array()
reported_IDS <- IDs$ID_Tsinghua
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
match = !is.na(str_locate(this_subid, db_IDS))
# if any matches
if (sum(match)>0){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[match_count] = db_IDS[match_ind]
}
}
sorted_DB_Ids
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
subid_count=0
sorted_DB_Ids=array()
reported_IDS <- IDs$ID_Tsinghua
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
subid_count = subid_count +1
match = !is.na(str_locate(this_subid, db_IDS))
# if any matches
if (sum(match)>0){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[subid_count] = db_IDS[match_ind]
}
else{
sorted_DB_Ids[subid_count] = 'NA'
}
}
sorted_DB_Ids
reported_IDS
dbs_sorted = as.data.frame(reported_IDS,sorted_DB_Ids)
reported_IDS
dbs_sorted
reported_IDS
length(reported_IDS)
length(sorted_DB_Ids)
dbs_sorted = as.data.frame(c(reported_IDS,sorted_DB_Ids))
dbs_sorted
dbs_sorted = as.data.frame(reported_IDS,sorted_DB_Ids)
dbs_sorted
reported_IDS
dbs_sorted = as_tibble(reported_IDS,sorted_DB_Ids)
reported_IDS
array(reported_IDS)
as.tibble(reported_IDS)
reported_IDS
bind_cols(reported_IDS, sorted_DB_Ids)
? bind_cols
bind_cols(data.frame(reported_IDS), data.frame(sorted_DB_Ids))
reported_IDS
unique(reported_IDS)
length(unique(reported_IDS))
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
subid_count=0
sorted_DB_Ids=array()
reported_IDS <- unique(reported_IDS)
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
subid_count = subid_count +1
match = !is.na(str_locate(this_subid, db_IDS))
# if any matches
if (sum(match)>0){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[subid_count] = db_IDS[match_ind]
}
else{
sorted_DB_Ids[subid_count] = 'NA'
}
}
bind_cols(data.frame(reported_IDS), data.frame(sorted_DB_Ids))
str_detect(this_subid, db_IDS)
!is.na(str_detect(this_subid, db_IDS))
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
subid_count=0
sorted_DB_Ids=array()
reported_IDS <- unique(reported_IDS)
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
subid_count = subid_count +1
match = !is.na(str_detect(this_subid, db_IDS))
# if any matches
if (sum(match)>0){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[subid_count] = db_IDS[match_ind]
}
else{
sorted_DB_Ids[subid_count] = 'NA'
}
}
bind_cols(data.frame(reported_IDS), data.frame(sorted_DB_Ids))
bind_cols
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
subid_count=0
sorted_DB_Ids=array()
reported_IDS <- unique(reported_IDS)
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
subid_count = subid_count +1
match = !is.na(str_detect(this_subid, db_IDS))
# if any matches
if (sum(match)>0){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[subid_count] = db_IDS[match_ind]
}
else{
sorted_DB_Ids[subid_count] = 'NA'
}
}
ID_matches = bind_cols(data.frame(reported_IDS), data.frame(sorted_DB_Ids))
ID_matches
need_matches = ID_matches$reported_IDS[is.na(ID_matches$sorted_DB_Ids)]
need_matches
db_IDS
no_db_match
no_db_match = ID_matches$reported_IDS[is.na(ID_matches$sorted_DB_Ids)]
no_db_match
ID_matches$reported_IDS
need_matches
db_IDS
no_ipad_assigned
no_ipad_assigned
no_db_match
sort(IDs$ID_Database)
str_detect(ID_matches$sorted_DB_Ids,IDs$ID_Database)
str_detect(IDs$ID_Database,ID_matches$sorted_DB_Ids,)
str_detect(IDs$ID_Database,ID_matches$sorted_DB_Ids)
str_detect(IDs$ID_Database, ID_matches$sorted_DB_Ids)
str_detect(ID_matches$sorted_DB_Ids,IDs$ID_Database)
ID_matches$sorted_DB_Ids
str_detect(ID_matches$sorted_DB_Ids,IDs$ID_Database)
ID_matches$sorted_DB_Ids
!is.na(ID_matches$sorted_DB_Ids)
sum(!is.na(ID_matches$sorted_DB_Ids))
need_matches
reported_IDS
ID_matches
sorted_DB_Ids
sorted_DB_Ids <- as_tibble() %>%
filter(is.na(value))
sorted_DB_Ids
sorted_DB_Ids <- as_tibble()
sorted_DB_Ids
sorted_DB_Ids
db_IDS <- as_tibble() %>%
filter(is.na(value))
db_IDS
db_IDS <- as_tibble(db_sorted) %>%
filter(is.na(value))
db_IDS
db_sorted = sort(IDs$ID_Database)
db_sorted
db_IDS <- as_tibble(db_sorted)
db_IDS
db_IDS$value
db_IDS <- as_tibble(db_sorted) %>%
filter(!is.na(value))
db_IDS
sorted_DB_Ids
# write_csv(data.frame(IDs$ID_Tsinghua), "Tsinghua_IDs_cleaned.csv")
# write_csv(IDs$ID_Database, "Tsinghua_DB_IDs_cleaned.csv")
# db_sorted = sort(IDs$ID_Database)
match_count=0
subid_count=0
sorted_DB_Ids=array()
reported_IDS <- unique(reported_IDS)
db_IDS <- IDs$ID_Database
for (this_subid in reported_IDS){
subid_count = subid_count +1
match = !is.na(str_detect(this_subid, db_IDS))
# if any matches
if (sum(match)>0){
match_count = match_count +1
match_ind = which(!is.na(str_locate(this_subid, db_IDS)))[1]
sorted_DB_Ids[subid_count] = db_IDS[match_ind]
}
else{
sorted_DB_Ids[subid_count] = 'NA'
}
}
sorted_DB_Ids
ID_matches = bind_cols(data.frame(reported_IDS), data.frame(sorted_DB_Ids))
num_matches = sum(!is.na(ID_matches$sorted_DB_Ids))
need_matches = ID_matches$reported_IDS[is.na(ID_matches$sorted_DB_Ids)]
db_sorted = sort(IDs$ID_Database)
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(value %in% sorted_DB_Ids)
## now filter matches out of db entries
not_matched_db
db_sorted = sort(IDs$ID_Database)
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids)
## now filter matches out of db entries
not_matched_db
db_sorted = sort(IDs$ID_Database)
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids)
write_csv(not_matched_db, "non-matched-db")
write_csv(need_matches, "Tsinghua_DB_need_matches.csv")
need_matches
db_sorted = sort(IDs$ID_Database)
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids)
write_csv(not_matched_db, "non-matched-db")
write_csv(as_tibble(need_matches), "Tsinghua_DB_need_matches.csv")
# db_sorted = sort(IDs$ID_Database)
write_csv(as_tibble(need_matches), "Tsinghua_DB_need_matches.csv")
write_csv(not_matched_db, "non-matched-db.csv")
need_matches
need_matches <- as_tibble() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
need_matches
try_matching <- as_tibble(need_matches) %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
try_mathcing
try_matching
try_matching <- as_tibble(need_matches) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2]) %>%
try_matching <- as_tibble(need_matches) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
try_matching
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids) %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
not_matched_db
db_sorted = sort(IDs$ID_Database)
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
need_matches <- as_tibble(need_matches) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
write_csv(not_matched_db, "non-matched-db.csv")
write_csv(as_tibble(need_matches), "Tsinghua_DB_need_matches.csv")
# db_sorted = sort(IDs$ID_Database)
db_sorted = sort(IDs$ID_Database)
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
need_matches <- as_tibble(need_matches) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2])
#
# write_csv(not_matched_db, "non-matched-db.csv")
# write_csv(as_tibble(need_matches), "Tsinghua_DB_need_matches.csv")
# db_sorted = sort(IDs$ID_Database)
not_matched_db
need_matches <- as_tibble(need_matches) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2]) %>%
mutate(maybe_match = SubID %in% not_matched_db$SubID)
need_matches
need_matches$maybe_match==FALSE
super_confused <- need_matches %>%
filter(maybe_match==FALSE)
super_confused
not_matched_db
not_matched_db$value
not_matched_db$SubID
sort(not_matched_db$SubID)
not_matched_db
need_matches
need_matches
super_confused
not_matched_db
not_matched_db <- as_tibble(db_sorted) %>%
filter(!is.na(value)) %>%
filter(!value %in% sorted_DB_Ids) %>%
rowwise() %>%
mutate(iPad_Used = str_split(value,"[_]")[[1]][1],SubID = str_split(value,"[_]")[[1]][2]) %>%
mutate(age = str_split_fixed(SubID,'THU',2)[,2])
not_matched_db
need_matched
need_matches
need_matches
need_matches$maybe_match
need_matches$value
not_matched_db
not_matched_db$SubID
sort(not_matched_db$SubID)
need_matches
not_matched_db
not_matched_db$SubID
sort(not_matched_db$SubID)
not_matched_db
View(not_matched_db)
View(not_matched_db)
library(png)
library(grid)
library(ggplot2)
library(xtable)
library(knitr)
library(tidyverse)
library(assertthat)
library(ggthemes)
library(lme4)
library(langcog)
library(viridis)
library(magick)
library(stringr)
library(egg)
theme_set(theme_few())
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv')
setwd("~/Documents/GitHub/xculture-draw/analysis/1_checksubjects")
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv')
IDs
IDsIDs <- read_csv('subject_logs/subIDs_afterNov15.csv')
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv')
subID
IDs
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv')
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv')
IDs
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv') %>%
rowwise() %>%
mutate(is_test = str_detect(subID,'test'))
IDs
IDs$is_test
subID
IDs
IDs$subID
IDs <- read_csv('subject_logs/subIDs_afterNov15.csv') %>%
rowwise() %>%
mutate(is_test = str_detect(subID,'test')) %>%
filter(is_test==FALSE) %>%
mutate(ID_Database = str_replace_all(subID,' ','')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'-','_'))  %>%
mutate(ID_Database = str_replace_all(ID_Database,'__','_')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'I','i'))  %>%
mutate(ID_Database = str_to_upper(ID_Database))  %>%
mutate(iPad_Used_DB = str_split(ID_Database,"[_]")[[1]][1],SubID_DB = str_split(ID_Database,"[_]")[[1]][2])
IDs
THU <- read_csv('subject_logs/KIDDRW_THU.csv')
THU
THU <- read_csv('subject_logs/KIDDRW_THU.csv')
THU
THU <- read_csv('subject_logs/KIDDRW_THU_cleaned.csv')
THU
THU <- read_csv('subject_logs/KIDDRW_THU_cleaned.csv')
THU
THU <- read_csv('subject_logs/KIDDRW_THU_cleaned.csv') %>%
select(age, gender, ID_age, CB, ID, note,db_mismatch)
THU
# ids in database
IDs_DB <- read_csv('subject_logs/subIDs_afterNov15.csv') %>%
rowwise() %>%
mutate(is_test = str_detect(subID,'test')) %>%
filter(is_test==FALSE) %>%
mutate(ID_Database = str_replace_all(subID,' ','')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'-','_'))  %>%
mutate(ID_Database = str_replace_all(ID_Database,'__','_')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'I','i'))  %>%
mutate(ID_Database = str_to_upper(ID_Database))  %>%
mutate(iPad_Used_DB = str_split(ID_Database,"[_]")[[1]][1],SubID_DB = str_split(ID_Database,"[_]")[[1]][2])
# ids in subject log
IDs_SL <- read_csv('subject_logs/KIDDRW_THU_cleaned.csv') %>%
select(age, gender, ID_age, CB, ID, note,db_mismatch) %>%
mutate(ID_SubjectLog = str_replace_all(ID,' ','')) %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'-','_'))  %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'__','_')) %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'I','i'))  %>%
mutate(ID_SubjectLog = str_to_upper(ID_SubjectLog))  %>%
mutate(iPad_Used_SL = str_split(ID_SubjectLog,"[_]")[[1]][1],SubID_SL = str_split(ID_SubjectLog,"[_]")[[1]][2])
no_ipad_assigned = c("IPA2_THU9F41"  , "IPAD_THU5F6"  , "IPAD_THU6F13" ,  "IPAD_THU7M12"  , "IPAD_THU8M21" )
IDs_DB
# ids in database
IDs_DB <- read_csv('subject_logs/subIDs_afterNov15.csv') %>%
rowwise() %>%
mutate(is_test = str_detect(subID,'test')) %>%
filter(is_test==FALSE) %>%
mutate(ID_Database = str_replace_all(subID,' ','')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'-','_'))  %>%
mutate(ID_Database = str_replace_all(ID_Database,'__','_')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'I','i'))  %>%
mutate(ID_Database = str_to_upper(ID_Database))  %>%
mutate(iPad_Used = str_split(ID_Database,"[_]")[[1]][1],Short_SubID = str_split(ID_Database,"[_]")[[1]][2])
# ids in subject log
IDs_SL <- read_csv('subject_logs/KIDDRW_THU_cleaned.csv') %>%
select(age, gender, ID_age, CB, ID, note,db_mismatch) %>%
mutate(ID_SubjectLog = str_replace_all(ID,' ','')) %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'-','_'))  %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'__','_')) %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'I','i'))  %>%
mutate(ID_SubjectLog = str_to_upper(ID_SubjectLog))  %>%
mutate(iPad_Used = str_split(ID_SubjectLog,"[_]")[[1]][1],Short_SubID = str_split(ID_SubjectLog,"[_]")[[1]][2])
no_ipad_assigned = c("IPA2_THU9F41"  , "IPAD_THU5F6"  , "IPAD_THU6F13" ,  "IPAD_THU7M12"  , "IPAD_THU8M21" )
merged <- IDs_SL %>%
left_join(ID_DB, by=c("iPad_Used","Short_SubID"))
merged <- IDs_SL %>%
left_join(IDs_DB, by=c("iPad_Used","Short_SubID"))
merged
View(merged)
# ids in database
IDs_DB <- read_csv('subject_logs/subIDs_afterNov15.csv') %>%
rowwise() %>%
mutate(is_test = str_detect(subID,'test')) %>%
filter(is_test==FALSE) %>%
mutate(ID_Database = str_replace_all(subID,' ','')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'-','_'))  %>%
mutate(ID_Database = str_replace_all(ID_Database,'__','_')) %>%
mutate(ID_Database = str_replace_all(ID_Database,'I','i'))  %>%
mutate(ID_Database = str_to_upper(ID_Database))  %>%
mutate(iPad_Used = str_split(ID_Database,"[_]")[[1]][1],Short_SubID = str_split(ID_Database,"[_]")[[1]][2])
# ids in subject log
IDs_SL <- read_csv('subject_logs/KIDDRW_THU_cleaned.csv') %>%
select(age, gender, ID_age, CB, ID, note,db_mismatch) %>%
rowwise() %>%
mutate(ID_SubjectLog = str_replace_all(ID,' ','')) %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'-','_'))  %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'__','_')) %>%
mutate(ID_SubjectLog = str_replace_all(ID_SubjectLog,'I','i'))  %>%
mutate(ID_SubjectLog = str_to_upper(ID_SubjectLog))  %>%
mutate(iPad_Used = str_split(ID_SubjectLog,"[_]")[[1]][1],Short_SubID = str_split(ID_SubjectLog,"[_]")[[1]][2])
merged <- IDs_SL %>%
left_join(IDs_DB, by=c("iPad_Used","Short_SubID"))
no_ipad_assigned = c("IPA2_THU9F41"  , "IPAD_THU5F6"  , "IPAD_THU6F13" ,  "IPAD_THU7M12"  , "IPAD_THU8M21" )
mismatch <- merged %>%
filter(is.na(ID_Database))
mismatch
db_only <- IDs_DB %>%
left_join(IDs_DB, by=c("iPad_Used","Short_SubID")) %>%
filter(is.na(ID_SubjectLog))
db_only <- IDs_DB %>%
left_join(IDs_SL, by=c("iPad_Used","Short_SubID")) %>%
filter(is.na(ID_SubjectLog))
db_only
db_only$is_test
mismatch
db_only
db_only$Short_SubID
db_only
write_csv(db_only,'db_only_IDs.csv'
)
mismatch
mismatch <- merged %>%
filter(is.na(ID_Database)) %>%
select(-db_mismatch, -subID, -is_test, -note)
mismatch
write_csv(mismatch,'no_db_entry.csv')
